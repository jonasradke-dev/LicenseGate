// <auto-generated />
using System;
using LicenseGate.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LicenseGate.Infrastructure.Migrations
{
    [DbContext(typeof(LicenseDbContext))]
    partial class LicenseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LicenseGate.Domain.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceFingerprint")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("device_fingerprint");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_heartbeat");

                    b.Property<string>("LicenseKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("license_key");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DeviceFingerprint")
                        .HasDatabaseName("idx_device_fingerprint");

                    b.HasIndex("LicenseKey")
                        .IsUnique()
                        .HasDatabaseName("idx_license_key");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_status");

                    b.ToTable("licenses", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
